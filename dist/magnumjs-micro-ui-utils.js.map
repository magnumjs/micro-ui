{
  "version": 3,
  "sources": ["../lib/utils/index.js", "../lib/utils/context.js", "../lib/utils/renderList.js"],
  "sourcesContent": ["export * from \"./context.js\";\r\nexport * from \"./renderList.js\";\r\n", "// context.js\r\n\r\n// ---------- Reusable channel map (used by global + components) ----------\r\nexport function createChannelMap() {\r\n  const channels = new Map();\r\n\r\n  return {\r\n    subscribe(eventName, fn) {\r\n      if (!channels.has(eventName)) channels.set(eventName, new Set());\r\n      const set = channels.get(eventName);\r\n      set.add(fn);\r\n      return () => set.delete(fn);\r\n    },\r\n    emit(eventName, payload) {\r\n      const set = channels.get(eventName);\r\n      if (set) for (const fn of set) fn(payload);\r\n    },\r\n    clear() {\r\n      channels.clear();\r\n    },\r\n  };\r\n}\r\n\r\n// ---------- Core reactive primitive ----------\r\nexport function createState(initial) {\r\n  let state = initial;\r\n  const subs = new Set();\r\n\r\n  function setState(next) {\r\n    if (\r\n      typeof state === \"object\" &&\r\n      state !== null &&\r\n      typeof next === \"object\" &&\r\n      next !== null &&\r\n      !Array.isArray(state) &&\r\n      !Array.isArray(next)\r\n    ) {\r\n      state = { ...state, ...next };\r\n    } else {\r\n      state = typeof next === \"function\" ? next(state) : next;\r\n    }\r\n    subs.forEach((fn) => fn(state));\r\n  }\r\n  function subscribe(fn) {\r\n    subs.add(fn);\r\n    fn(state);\r\n    return () => subs.delete(fn);\r\n  }\r\n  function get() {\r\n    return state;\r\n  }\r\n\r\n  return { get, setState, getState: get, subscribe };\r\n}\r\n\r\n// ---------- Global pub/sub (unchanged API) ----------\r\nexport const context = createChannelMap();\r\n\r\n// ---------- Shared stores (global keyed) ----------\r\nconst stores = new Map();\r\n\r\nexport function shared(key, initial = {}) {\r\n  if (!stores.has(key)) {\r\n    const state = createState(initial);\r\n    const api = {\r\n      ...state,\r\n      emit(event, payload) {\r\n        state.setState(payload);\r\n        context.emit(`${key}::${event}`, state.getState());\r\n      },\r\n      on(event, fn) {\r\n        return context.subscribe(`${key}::${event}`, fn);\r\n      },\r\n    };\r\n    stores.set(key, api);\r\n  }\r\n  return stores.get(key);\r\n}\r\nshared.clear = () => stores.clear();\r\n", "// renderList.js\r\n// Helper to render arrays with keys for micro-ui\r\n\r\nexport function renderList(array, renderFn, keyFn = (item) => item.id ?? item.key ?? item) {\r\n  return array\r\n    .map((item, index) => {\r\n      const key = keyFn(item, index);\r\n      const inner = renderFn(item, index);\r\n      // Only add data-key if inner is string and starts with a tag\r\n      if (typeof inner === \"string\") {\r\n        return inner.replace(\r\n          /^<([a-zA-Z0-9-]+)/,\r\n          `<$1 data-key=\"${String(key).replace(/\"/g, \"&quot;\")}\"`\r\n        );\r\n      }\r\n      return inner;\r\n    })\r\n    .join(\"\");\r\n}\r\n"],
  "mappings": ";;;;;mbAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,EAAA,qBAAAC,EAAA,gBAAAC,EAAA,eAAAC,EAAA,WAAAC,ICGO,SAASC,GAAmB,CACjC,IAAMC,EAAW,IAAI,IAErB,MAAO,CACL,UAAUC,EAAWC,EAAI,CAClBF,EAAS,IAAIC,CAAS,GAAGD,EAAS,IAAIC,EAAW,IAAI,GAAK,EAC/D,IAAME,EAAMH,EAAS,IAAIC,CAAS,EAClC,OAAAE,EAAI,IAAID,CAAE,EACH,IAAMC,EAAI,OAAOD,CAAE,CAC5B,EACA,KAAKD,EAAWG,EAAS,CACvB,IAAMD,EAAMH,EAAS,IAAIC,CAAS,EAClC,GAAIE,EAAK,QAAWD,KAAMC,EAAKD,EAAGE,CAAO,CAC3C,EACA,OAAQ,CACNJ,EAAS,MAAM,CACjB,CACF,CACF,CAGO,SAASK,EAAYC,EAAS,CACnC,IAAIC,EAAQD,EACNE,EAAO,IAAI,IAEjB,SAASC,EAASC,EAAM,CAEpB,OAAOH,GAAU,UACjBA,IAAU,MACV,OAAOG,GAAS,UAChBA,IAAS,MACT,CAAC,MAAM,QAAQH,CAAK,GACpB,CAAC,MAAM,QAAQG,CAAI,EAEnBH,EAAQ,CAAE,GAAGA,EAAO,GAAGG,CAAK,EAE5BH,EAAQ,OAAOG,GAAS,WAAaA,EAAKH,CAAK,EAAIG,EAErDF,EAAK,QAASN,GAAOA,EAAGK,CAAK,CAAC,CAChC,CACA,SAASI,EAAUT,EAAI,CACrB,OAAAM,EAAK,IAAIN,CAAE,EACXA,EAAGK,CAAK,EACD,IAAMC,EAAK,OAAON,CAAE,CAC7B,CACA,SAASU,GAAM,CACb,OAAOL,CACT,CAEA,MAAO,CAAE,IAAAK,EAAK,SAAAH,EAAU,SAAUG,EAAK,UAAAD,CAAU,CACnD,CAGO,IAAME,EAAUd,EAAiB,EAGlCe,EAAS,IAAI,IAEZ,SAASC,EAAOC,EAAKV,EAAU,CAAC,EAAG,CACxC,GAAI,CAACQ,EAAO,IAAIE,CAAG,EAAG,CACpB,IAAMT,EAAQF,EAAYC,CAAO,EAC3BW,EAAM,CACV,GAAGV,EACH,KAAKW,EAAOd,EAAS,CACnBG,EAAM,SAASH,CAAO,EACtBS,EAAQ,KAAK,GAAGG,CAAG,KAAKE,CAAK,GAAIX,EAAM,SAAS,CAAC,CACnD,EACA,GAAGW,EAAOhB,EAAI,CACZ,OAAOW,EAAQ,UAAU,GAAGG,CAAG,KAAKE,CAAK,GAAIhB,CAAE,CACjD,CACF,EACAY,EAAO,IAAIE,EAAKC,CAAG,CACrB,CACA,OAAOH,EAAO,IAAIE,CAAG,CACvB,CACAD,EAAO,MAAQ,IAAMD,EAAO,MAAM,EC3E3B,SAASK,EAAWC,EAAOC,EAAUC,EAASC,GAASA,EAAK,IAAMA,EAAK,KAAOA,EAAM,CACzF,OAAOH,EACJ,IAAI,CAACG,EAAMC,IAAU,CACpB,IAAMC,EAAMH,EAAMC,EAAMC,CAAK,EACvBE,EAAQL,EAASE,EAAMC,CAAK,EAElC,OAAI,OAAOE,GAAU,SACZA,EAAM,QACX,oBACA,iBAAiB,OAAOD,CAAG,EAAE,QAAQ,KAAM,QAAQ,CAAC,GACtD,EAEKC,CACT,CAAC,EACA,KAAK,EAAE,CACZ",
  "names": ["utils_exports", "__export", "context", "createChannelMap", "createState", "renderList", "shared", "createChannelMap", "channels", "eventName", "fn", "set", "payload", "createState", "initial", "state", "subs", "setState", "next", "subscribe", "get", "context", "stores", "shared", "key", "api", "event", "renderList", "array", "renderFn", "keyFn", "item", "index", "key", "inner"]
}
