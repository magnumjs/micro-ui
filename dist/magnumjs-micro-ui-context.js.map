{
  "version": 3,
  "sources": ["../lib/compose/context.js"],
  "sourcesContent": ["// context.js\r\n\r\n// ---------- Reusable channel map (used by global + components) ----------\r\nexport function createChannelMap() {\r\n  const channels = new Map();\r\n\r\n  return {\r\n    subscribe(eventName, fn) {\r\n      if (!channels.has(eventName)) channels.set(eventName, new Set());\r\n      const set = channels.get(eventName);\r\n      set.add(fn);\r\n      return () => set.delete(fn);\r\n    },\r\n    emit(eventName, payload) {\r\n      const set = channels.get(eventName);\r\n      if (set) for (const fn of set) fn(payload);\r\n    },\r\n    clear() {\r\n      channels.clear();\r\n    },\r\n  };\r\n}\r\n\r\n// ---------- Core reactive primitive ----------\r\nexport function createState(initial) {\r\n  let state = initial;\r\n  const subs = new Set();\r\n\r\n  function setState(next) {\r\n    if (\r\n      typeof state === \"object\" &&\r\n      state !== null &&\r\n      typeof next === \"object\" &&\r\n      next !== null &&\r\n      !Array.isArray(state) &&\r\n      !Array.isArray(next)\r\n    ) {\r\n      state = { ...state, ...next };\r\n    } else {\r\n      state = typeof next === \"function\" ? next(state) : next;\r\n    }\r\n    subs.forEach((fn) => fn(state));\r\n  }\r\n  function subscribe(fn) {\r\n    subs.add(fn);\r\n    fn(state);\r\n    return () => subs.delete(fn);\r\n  }\r\n  function get() {\r\n    return state;\r\n  }\r\n\r\n  return { get, setState, getState: get, subscribe };\r\n}\r\n\r\n// ---------- Global pub/sub (unchanged API) ----------\r\nexport const context = createChannelMap();\r\n\r\n// ---------- Shared stores (global keyed) ----------\r\nconst stores = new Map();\r\n\r\nexport function shared(key, initial = {}) {\r\n  if (!stores.has(key)) {\r\n    const state = createState(initial);\r\n    const api = {\r\n      ...state,\r\n      emit(event, payload) {\r\n        state.setState(payload);\r\n        context.emit(`${key}::${event}`, state.getState());\r\n      },\r\n      on(event, fn) {\r\n        return context.subscribe(`${key}::${event}`, fn);\r\n      },\r\n    };\r\n    stores.set(key, api);\r\n  }\r\n  return stores.get(key);\r\n}\r\nshared.clear = () => stores.clear();\r\n"],
  "mappings": ";;;;;qbAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,EAAA,qBAAAC,EAAA,gBAAAC,EAAA,WAAAC,IAGO,SAASF,GAAmB,CACjC,IAAMG,EAAW,IAAI,IAErB,MAAO,CACL,UAAUC,EAAWC,EAAI,CAClBF,EAAS,IAAIC,CAAS,GAAGD,EAAS,IAAIC,EAAW,IAAI,GAAK,EAC/D,IAAME,EAAMH,EAAS,IAAIC,CAAS,EAClC,OAAAE,EAAI,IAAID,CAAE,EACH,IAAMC,EAAI,OAAOD,CAAE,CAC5B,EACA,KAAKD,EAAWG,EAAS,CACvB,IAAMD,EAAMH,EAAS,IAAIC,CAAS,EAClC,GAAIE,EAAK,QAAWD,KAAMC,EAAKD,EAAGE,CAAO,CAC3C,EACA,OAAQ,CACNJ,EAAS,MAAM,CACjB,CACF,CACF,CAGO,SAASF,EAAYO,EAAS,CACnC,IAAIC,EAAQD,EACNE,EAAO,IAAI,IAEjB,SAASC,EAASC,EAAM,CAEpB,OAAOH,GAAU,UACjBA,IAAU,MACV,OAAOG,GAAS,UAChBA,IAAS,MACT,CAAC,MAAM,QAAQH,CAAK,GACpB,CAAC,MAAM,QAAQG,CAAI,EAEnBH,EAAQ,CAAE,GAAGA,EAAO,GAAGG,CAAK,EAE5BH,EAAQ,OAAOG,GAAS,WAAaA,EAAKH,CAAK,EAAIG,EAErDF,EAAK,QAASL,GAAOA,EAAGI,CAAK,CAAC,CAChC,CACA,SAASI,EAAUR,EAAI,CACrB,OAAAK,EAAK,IAAIL,CAAE,EACXA,EAAGI,CAAK,EACD,IAAMC,EAAK,OAAOL,CAAE,CAC7B,CACA,SAASS,GAAM,CACb,OAAOL,CACT,CAEA,MAAO,CAAE,IAAAK,EAAK,SAAAH,EAAU,SAAUG,EAAK,UAAAD,CAAU,CACnD,CAGO,IAAMd,EAAUC,EAAiB,EAGlCe,EAAS,IAAI,IAEZ,SAASb,EAAOc,EAAKR,EAAU,CAAC,EAAG,CACxC,GAAI,CAACO,EAAO,IAAIC,CAAG,EAAG,CACpB,IAAMP,EAAQR,EAAYO,CAAO,EAC3BS,EAAM,CACV,GAAGR,EACH,KAAKS,EAAOX,EAAS,CACnBE,EAAM,SAASF,CAAO,EACtBR,EAAQ,KAAK,GAAGiB,CAAG,KAAKE,CAAK,GAAIT,EAAM,SAAS,CAAC,CACnD,EACA,GAAGS,EAAOb,EAAI,CACZ,OAAON,EAAQ,UAAU,GAAGiB,CAAG,KAAKE,CAAK,GAAIb,CAAE,CACjD,CACF,EACAU,EAAO,IAAIC,EAAKC,CAAG,CACrB,CACA,OAAOF,EAAO,IAAIC,CAAG,CACvB,CACAd,EAAO,MAAQ,IAAMa,EAAO,MAAM",
  "names": ["context_exports", "__export", "context", "createChannelMap", "createState", "shared", "channels", "eventName", "fn", "set", "payload", "initial", "state", "subs", "setState", "next", "subscribe", "get", "stores", "key", "api", "event"]
}
